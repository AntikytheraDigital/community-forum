openapi: 3.0.0
info:
  version: 1.0.0
  title: Community Forum Server API
  description: Server API for the Community Forum

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
  /auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: JohnDoe
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  JWT:
                    type: string
                    required: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
  /auth/check:
    get:
      summary: Check if user has valid JWT
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    required: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
  #BOARDS
  /boards/all:
    get:
      summary: Get list of all boards
      responses:
        '200':
          description: JSON array of boards
          content:
            application/json:
              schema:
                type: object
                properties:
                  boards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Board'
  #POSTS
  /posts:
    post:
      summary: Create a new Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
  /posts/all:
    get:
      summary: Get all posts
      description: Sorted by timestamp
      responses:
        '200':
          description: JSON array of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /posts/{postID}:
    get:
      summary: Find post by UID
      parameters:
        - in: path
          name: postID
          required: true
          description: id of the post
          schema:
            type: string
      responses:
        '200':
          description: JSON object of post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
    delete:
      summary: Delete post by UID
      parameters:
        - in: path
          name: id
          required: true
          description: id of the post
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
    patch:
      summary: Update post by UID
      parameters:
        - in: path
          name: id
          required: true
          description: id of the post
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newContent:
                  type: string
                  example: New content
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
  /posts/comments:
    post:
      summary: Add a comment to a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
    delete:
      summary: Delete a comment from a post
      parameters:
        - in: query
          name: postID
          required: true
          description: id of the post
          schema:
            type: string
        - in: query
          name: commentID
          required: true
          description: id of the comment
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
  /posts/findByBoard?:
    get:
      summary: Find posts by board
      parameters:
        - in: query
          name: boardName
          required: true
          description: name of the board
          schema:
            type: string
      responses:
        '200':
          description: JSON array of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
components:
  schemas:
    ServerResponse:
      type: object
      properties:
        message:
          type: string
          example: Request successful
        error:
          type: string
          example: Could not complete request because reasons
      required:
        - message
    Board:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          description: UID generated by mongodb
          example: 5f9b0a5b9b0a9f9b0a9f9b0a
        boardName:
          type: string
          description: Name of the board
          example: FunnyStuff
        boardDescription:
          type: string
          description: Description of the board
          example: Post only jokes that are funny
      required:
        - boardName
        - boardDescription
    User:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          description: UID generated by mongodb
          example: 5f9b0a5b9b0a9f9b0a9f9b0a
        username:
          type: string
          example: JohnDoe
        email:
          type: string
          example: user@domain.com
        password:
          type: string
          writeOnly: true
      required:
        - username
        - email
        - password
    Post:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          description: UID generated by mongodb
          example: 5f9b0a5b9b0a9f9b0a9f9b0a
        boardName:
          type: string
          description: foreign key from Board
          example: FunnyStuff
        username:
          type: string
          description: foreign key from User
          example: johnDoe
        timestamp:
          type: string
          readOnly: true
          description: UTC timestamp
          example: 2020-10-29T20:00:00.000Z
        content:
          type: string
          example: Why did the chicken cross the road?
        title:
          type: string
          example: Funny joke
        comments:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Comment'
      required:
        - boardName
        - authorID
        - timestamp
        - title
        - content
    Comment:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          description: UID generated by mongodb
          example: 5f9b0a5b9b0a9f9b0a9f9b0a
        username:
          type: string
          description: foreign key from User
          example: johnDoe
        timestamp:
          type: string
          readOnly: true
          description: UTC timestamp
          example: 2020-10-29T20:00:00.000Z
        content:
          type: string
          example: Because it wanted to get to the other side
      required:
        - username
        - timestamp
        - content